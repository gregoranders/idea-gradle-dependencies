plugins {
  id 'java'
  id 'java-library'
  id 'groovy'
  id 'idea'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  id 'project-report'
  id 'build-dashboard'
  id 'com.github.spotbugs' version '5.0.3'
  id 'org.owasp.dependencycheck' version '6.5.2'
  id 'org.javamodularity.moduleplugin' version '1.8.10'
  id 'org.sonarqube' version '3.3'
  id 'projectConfiguration'
}

repositories {
  mavenCentral()
  mavenLocal()
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }

  project {
    vcs = 'Git'
    jdkName = "jdk-${JavaVersion.VERSION_17}"
    languageLevel = JavaVersion.VERSION_17
  }
}

jar {
  def manifestAttributes = [
    'Created-By'              : "Gradle ${gradle.gradleVersion}",
    'Specification-Title'     : "${project.property('description')}",
    'Specification-Version'   : project.version,
    'Specification-Vendor'    : "${rootProject.property('author')} <${project.property('email')}>",
    'Implementation-Title'    : project.property('description'),
    'Implementation-Version'  : project.version,
    'Implementation-Vendor'   : "${rootProject.property('author')} <${project.property('email')}>",
    'Implementation-Vendor-Id': "${rootProject.property('author')} <${project.property('email')}>",
  ]

  manifest {
    attributes(manifestAttributes)
  }
}

javadoc {
  options.addStringOption('Xdoclint:none', '-quiet')
}

test {
  moduleOptions {
    runOnClasspath = true
  }
  systemProperty 'com.athaydes.spockframework.report.projectName', "${project.group}.${project.name}"
  systemProperty 'com.athaydes.spockframework.report.projectVersion', "${project.version}"
}

project.modularity.patchModule('gradle-api', "groovy-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-ant-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-astbuilder-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-console-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-datetime-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-dateutil-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-groovydoc-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-json-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-nio-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-sql-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-templates-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-test-${property('groovyVersion')}.jar")
project.modularity.patchModule('gradle-api', "groovy-xml-${property('groovyVersion')}.jar")

project.modularity.patchModule('gradle-api', "javaparser-core-${property('javaparserCoreVersion')}.jar")

project.modularity.patchModule('gradle-api', "slf4j-api-${property('slf4jVersion')}.jar")

dependencies {

  implementation(
    gradleApi(),
    [group: 'org.slf4j', name: 'slf4j-api', version: property('slf4jVersion')],
  )

  runtimeOnly(
    [group: 'ch.qos.logback', name: 'logback-core', version: property('logbackVersion')],
    [group: 'ch.qos.logback', name: 'logback-classic', version: property('logbackVersion')],
  )

  testImplementation(
    [group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: property('junitVersion')],
    platform(
      [group: 'org.codehaus.groovy', name: 'groovy-bom', version: property('groovyVersion')]
    ),
    [group: 'org.codehaus.groovy', name: 'groovy', version: property('groovyVersion')],
    [group: 'org.codehaus.groovy', name: 'groovy-json', version: property('groovyVersion')],
    [group: 'org.codehaus.groovy', name: 'groovy-templates', version: property('groovyVersion')],
    [group: 'org.codehaus.groovy', name: 'groovy-xml', version: property('groovyVersion')],

    platform(
      [group: 'org.spockframework', name: 'spock-bom', version: property('spockVersion')]
    ),
    [group: 'org.spockframework', name: 'spock-core'],
    [group: 'io.github.joke', name: 'spock-mockable', version: property('spockMockableVersion')],
  )

  testImplementation(
    [group: 'com.athaydes', name: 'spock-reports', version: property('spockReportsVersion')]
  ) {
    transitive = false
  }

  testRuntimeOnly(
    [group: 'net.bytebuddy', name: 'byte-buddy', version: property('byteBuddyVersion')],
    [group: 'org.objenesis', name: 'objenesis', version: property('objenesisVersion')],
  )
}
